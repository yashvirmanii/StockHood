{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InterceptResolutionAction = exports.HTTPRequest = exports.DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n/**\n * The default cooperative request interception resolution priority\n *\n * @public\n */\n\n\nexports.DEFAULT_INTERCEPT_RESOLUTION_PRIORITY = 0;\n/**\n *\n * Represents an HTTP request sent by a page.\n * @remarks\n *\n * Whenever the page sends a request, such as for a network resource, the\n * following events are emitted by Puppeteer's `page`:\n *\n * - `request`:  emitted when the request is issued by the page.\n * - `requestfinished` - emitted when the response body is downloaded and the\n *   request is complete.\n *\n * If request fails at some point, then instead of `requestfinished` event the\n * `requestfailed` event is emitted.\n *\n * All of these events provide an instance of `HTTPRequest` representing the\n * request that occurred:\n *\n * ```\n * page.on('request', request => ...)\n * ```\n *\n * NOTE: HTTP Error responses, such as 404 or 503, are still successful\n * responses from HTTP standpoint, so request will complete with\n * `requestfinished` event.\n *\n * If request gets a 'redirect' response, the request is successfully finished\n * with the `requestfinished` event, and a new request is issued to a\n * redirected url.\n *\n * @public\n */\n\nclass HTTPRequest {\n  /**\n   * @internal\n   */\n  constructor(client, frame, interceptionId, allowInterception, event, redirectChain) {\n    /**\n     * @internal\n     */\n    this._failureText = null;\n    /**\n     * @internal\n     */\n\n    this._response = null;\n    /**\n     * @internal\n     */\n\n    this._fromMemoryCache = false;\n    this._interceptionHandled = false;\n    this._headers = {};\n    this._client = client;\n    this._requestId = event.requestId;\n    this._isNavigationRequest = event.requestId === event.loaderId && event.type === 'Document';\n    this._interceptionId = interceptionId;\n    this._allowInterception = allowInterception;\n    this._url = event.request.url;\n    this._resourceType = event.type.toLowerCase();\n    this._method = event.request.method;\n    this._postData = event.request.postData;\n    this._frame = frame;\n    this._redirectChain = redirectChain;\n    this._continueRequestOverrides = {};\n    this._interceptResolutionState = {\n      action: InterceptResolutionAction.None\n    };\n    this._interceptHandlers = [];\n    this._initiator = event.initiator;\n\n    for (const key of Object.keys(event.request.headers)) this._headers[key.toLowerCase()] = event.request.headers[key];\n  }\n  /**\n   * @returns the URL of the request\n   */\n\n\n  url() {\n    return this._url;\n  }\n  /**\n   * @returns the `ContinueRequestOverrides` that will be used\n   * if the interception is allowed to continue (ie, `abort()` and\n   * `respond()` aren't called).\n   */\n\n\n  continueRequestOverrides() {\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    return this._continueRequestOverrides;\n  }\n  /**\n   * @returns The `ResponseForRequest` that gets used if the\n   * interception is allowed to respond (ie, `abort()` is not called).\n   */\n\n\n  responseForRequest() {\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    return this._responseForRequest;\n  }\n  /**\n   * @returns the most recent reason for aborting the request\n   */\n\n\n  abortErrorReason() {\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    return this._abortErrorReason;\n  }\n  /**\n   * @returns An InterceptResolutionState object describing the current resolution\n   *  action and priority.\n   *\n   *  InterceptResolutionState contains:\n   *    action: InterceptResolutionAction\n   *    priority?: number\n   *\n   *  InterceptResolutionAction is one of: `abort`, `respond`, `continue`,\n   *  `disabled`, `none`, or `already-handled`.\n   */\n\n\n  interceptResolutionState() {\n    if (!this._allowInterception) return {\n      action: InterceptResolutionAction.Disabled\n    };\n    if (this._interceptionHandled) return {\n      action: InterceptResolutionAction.AlreadyHandled\n    };\n    return { ...this._interceptResolutionState\n    };\n  }\n  /**\n   * @returns `true` if the intercept resolution has already been handled,\n   * `false` otherwise.\n   */\n\n\n  isInterceptResolutionHandled() {\n    return this._interceptionHandled;\n  }\n  /**\n   * Adds an async request handler to the processing queue.\n   * Deferred handlers are not guaranteed to execute in any particular order,\n   * but they are guarnateed to resolve before the request interception\n   * is finalized.\n   */\n\n\n  enqueueInterceptAction(pendingHandler) {\n    this._interceptHandlers.push(pendingHandler);\n  }\n  /**\n   * Awaits pending interception handlers and then decides how to fulfill\n   * the request interception.\n   */\n\n\n  async finalizeInterceptions() {\n    await this._interceptHandlers.reduce((promiseChain, interceptAction) => promiseChain.then(interceptAction), Promise.resolve());\n    const {\n      action\n    } = this.interceptResolutionState();\n\n    switch (action) {\n      case 'abort':\n        return this._abort(this._abortErrorReason);\n\n      case 'respond':\n        return this._respond(this._responseForRequest);\n\n      case 'continue':\n        return this._continue(this._continueRequestOverrides);\n    }\n  }\n  /**\n   * Contains the request's resource type as it was perceived by the rendering\n   * engine.\n   */\n\n\n  resourceType() {\n    return this._resourceType;\n  }\n  /**\n   * @returns the method used (`GET`, `POST`, etc.)\n   */\n\n\n  method() {\n    return this._method;\n  }\n  /**\n   * @returns the request's post body, if any.\n   */\n\n\n  postData() {\n    return this._postData;\n  }\n  /**\n   * @returns an object with HTTP headers associated with the request. All\n   * header names are lower-case.\n   */\n\n\n  headers() {\n    return this._headers;\n  }\n  /**\n   * @returns A matching `HTTPResponse` object, or null if the response has not\n   * been received yet.\n   */\n\n\n  response() {\n    return this._response;\n  }\n  /**\n   * @returns the frame that initiated the request, or null if navigating to\n   * error pages.\n   */\n\n\n  frame() {\n    return this._frame;\n  }\n  /**\n   * @returns true if the request is the driver of the current frame's navigation.\n   */\n\n\n  isNavigationRequest() {\n    return this._isNavigationRequest;\n  }\n  /**\n   * @returns the initiator of the request.\n   */\n\n\n  initiator() {\n    return this._initiator;\n  }\n  /**\n   * A `redirectChain` is a chain of requests initiated to fetch a resource.\n   * @remarks\n   *\n   * `redirectChain` is shared between all the requests of the same chain.\n   *\n   * For example, if the website `http://example.com` has a single redirect to\n   * `https://example.com`, then the chain will contain one request:\n   *\n   * ```js\n   * const response = await page.goto('http://example.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 1\n   * console.log(chain[0].url()); // 'http://example.com'\n   * ```\n   *\n   * If the website `https://google.com` has no redirects, then the chain will be empty:\n   *\n   * ```js\n   * const response = await page.goto('https://google.com');\n   * const chain = response.request().redirectChain();\n   * console.log(chain.length); // 0\n   * ```\n   *\n   * @returns the chain of requests - if a server responds with at least a\n   * single redirect, this chain will contain all requests that were redirected.\n   */\n\n\n  redirectChain() {\n    return this._redirectChain.slice();\n  }\n  /**\n   * Access information about the request's failure.\n   *\n   * @remarks\n   *\n   * @example\n   *\n   * Example of logging all failed requests:\n   *\n   * ```js\n   * page.on('requestfailed', request => {\n   *   console.log(request.url() + ' ' + request.failure().errorText);\n   * });\n   * ```\n   *\n   * @returns `null` unless the request failed. If the request fails this can\n   * return an object with `errorText` containing a human-readable error\n   * message, e.g. `net::ERR_FAILED`. It is not guaranteeded that there will be\n   * failure text if the request fails.\n   */\n\n\n  failure() {\n    if (!this._failureText) return null;\n    return {\n      errorText: this._failureText\n    };\n  }\n  /**\n   * Continues request with optional request overrides.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   * ```js\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   // Override headers\n   *   const headers = Object.assign({}, request.headers(), {\n   *     foo: 'bar', // set \"foo\" header\n   *     origin: undefined, // remove \"origin\" header\n   *   });\n   *   request.continue({headers});\n   * });\n   * ```\n   *\n   * @param overrides - optional overrides to apply to the request.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n\n\n  async continue() {\n    let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let priority = arguments.length > 1 ? arguments[1] : undefined;\n    // Request interception is not supported for data: urls.\n    if (this._url.startsWith('data:')) return;\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    (0, assert_js_1.assert)(!this._interceptionHandled, 'Request is already handled!');\n\n    if (priority === undefined) {\n      return this._continue(overrides);\n    }\n\n    this._continueRequestOverrides = overrides;\n\n    if (priority > this._interceptResolutionState.priority || this._interceptResolutionState.priority === undefined) {\n      this._interceptResolutionState = {\n        action: InterceptResolutionAction.Continue,\n        priority\n      };\n      return;\n    }\n\n    if (priority === this._interceptResolutionState.priority) {\n      if (this._interceptResolutionState.action === 'abort' || this._interceptResolutionState.action === 'respond') {\n        return;\n      }\n\n      this._interceptResolutionState.action = InterceptResolutionAction.Continue;\n    }\n\n    return;\n  }\n\n  async _continue() {\n    let overrides = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      url,\n      method,\n      postData,\n      headers\n    } = overrides;\n    this._interceptionHandled = true;\n    const postDataBinaryBase64 = postData ? Buffer.from(postData).toString('base64') : undefined;\n    await this._client.send('Fetch.continueRequest', {\n      requestId: this._interceptionId,\n      url,\n      method,\n      postData: postDataBinaryBase64,\n      headers: headers ? headersArray(headers) : undefined\n    }).catch(error => {\n      this._interceptionHandled = false;\n      return handleError(error);\n    });\n  }\n  /**\n   * Fulfills a request with the given response.\n   *\n   * @remarks\n   *\n   * To use this, request\n   * interception should be enabled with {@link Page.setRequestInterception}.\n   *\n   * Exception is immediately thrown if the request interception is not enabled.\n   *\n   * @example\n   * An example of fulfilling all requests with 404 responses:\n   * ```js\n   * await page.setRequestInterception(true);\n   * page.on('request', request => {\n   *   request.respond({\n   *     status: 404,\n   *     contentType: 'text/plain',\n   *     body: 'Not Found!'\n   *   });\n   * });\n   * ```\n   *\n   * NOTE: Mocking responses for dataURL requests is not supported.\n   * Calling `request.respond` for a dataURL request is a noop.\n   *\n   * @param response - the response to fulfill the request with.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n\n\n  async respond(response, priority) {\n    // Mocking responses for dataURL requests is not currently supported.\n    if (this._url.startsWith('data:')) return;\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    (0, assert_js_1.assert)(!this._interceptionHandled, 'Request is already handled!');\n\n    if (priority === undefined) {\n      return this._respond(response);\n    }\n\n    this._responseForRequest = response;\n\n    if (priority > this._interceptResolutionState.priority || this._interceptResolutionState.priority === undefined) {\n      this._interceptResolutionState = {\n        action: InterceptResolutionAction.Respond,\n        priority\n      };\n      return;\n    }\n\n    if (priority === this._interceptResolutionState.priority) {\n      if (this._interceptResolutionState.action === 'abort') {\n        return;\n      }\n\n      this._interceptResolutionState.action = InterceptResolutionAction.Respond;\n    }\n  }\n\n  async _respond(response) {\n    this._interceptionHandled = true;\n    const responseBody = response.body && helper_js_1.helper.isString(response.body) ? Buffer.from(response.body) : response.body || null;\n    const responseHeaders = {};\n\n    if (response.headers) {\n      for (const header of Object.keys(response.headers)) responseHeaders[header.toLowerCase()] = String(response.headers[header]);\n    }\n\n    if (response.contentType) responseHeaders['content-type'] = response.contentType;\n    if (responseBody && !('content-length' in responseHeaders)) responseHeaders['content-length'] = String(Buffer.byteLength(responseBody));\n    await this._client.send('Fetch.fulfillRequest', {\n      requestId: this._interceptionId,\n      responseCode: response.status || 200,\n      responsePhrase: STATUS_TEXTS[response.status || 200],\n      responseHeaders: headersArray(responseHeaders),\n      body: responseBody ? responseBody.toString('base64') : undefined\n    }).catch(error => {\n      this._interceptionHandled = false;\n      return handleError(error);\n    });\n  }\n  /**\n   * Aborts a request.\n   *\n   * @remarks\n   * To use this, request interception should be enabled with\n   * {@link Page.setRequestInterception}. If it is not enabled, this method will\n   * throw an exception immediately.\n   *\n   * @param errorCode - optional error code to provide.\n   * @param priority - If provided, intercept is resolved using\n   * cooperative handling rules. Otherwise, intercept is resolved\n   * immediately.\n   */\n\n\n  async abort() {\n    let errorCode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'failed';\n    let priority = arguments.length > 1 ? arguments[1] : undefined;\n    // Request interception is not supported for data: urls.\n    if (this._url.startsWith('data:')) return;\n    const errorReason = errorReasons[errorCode];\n    (0, assert_js_1.assert)(errorReason, 'Unknown error code: ' + errorCode);\n    (0, assert_js_1.assert)(this._allowInterception, 'Request Interception is not enabled!');\n    (0, assert_js_1.assert)(!this._interceptionHandled, 'Request is already handled!');\n\n    if (priority === undefined) {\n      return this._abort(errorReason);\n    }\n\n    this._abortErrorReason = errorReason;\n\n    if (priority >= this._interceptResolutionState.priority || this._interceptResolutionState.priority === undefined) {\n      this._interceptResolutionState = {\n        action: InterceptResolutionAction.Abort,\n        priority\n      };\n      return;\n    }\n  }\n\n  async _abort(errorReason) {\n    this._interceptionHandled = true;\n    await this._client.send('Fetch.failRequest', {\n      requestId: this._interceptionId,\n      errorReason\n    }).catch(handleError);\n  }\n\n}\n\nexports.HTTPRequest = HTTPRequest;\n/**\n * @public\n */\n\nvar InterceptResolutionAction;\n\n(function (InterceptResolutionAction) {\n  InterceptResolutionAction[\"Abort\"] = \"abort\";\n  InterceptResolutionAction[\"Respond\"] = \"respond\";\n  InterceptResolutionAction[\"Continue\"] = \"continue\";\n  InterceptResolutionAction[\"Disabled\"] = \"disabled\";\n  InterceptResolutionAction[\"None\"] = \"none\";\n  InterceptResolutionAction[\"AlreadyHandled\"] = \"already-handled\";\n})(InterceptResolutionAction = exports.InterceptResolutionAction || (exports.InterceptResolutionAction = {}));\n\nconst errorReasons = {\n  aborted: 'Aborted',\n  accessdenied: 'AccessDenied',\n  addressunreachable: 'AddressUnreachable',\n  blockedbyclient: 'BlockedByClient',\n  blockedbyresponse: 'BlockedByResponse',\n  connectionaborted: 'ConnectionAborted',\n  connectionclosed: 'ConnectionClosed',\n  connectionfailed: 'ConnectionFailed',\n  connectionrefused: 'ConnectionRefused',\n  connectionreset: 'ConnectionReset',\n  internetdisconnected: 'InternetDisconnected',\n  namenotresolved: 'NameNotResolved',\n  timedout: 'TimedOut',\n  failed: 'Failed'\n};\n\nfunction headersArray(headers) {\n  const result = [];\n\n  for (const name in headers) {\n    if (!Object.is(headers[name], undefined)) result.push({\n      name,\n      value: headers[name] + ''\n    });\n  }\n\n  return result;\n}\n\nasync function handleError(error) {\n  if (['Invalid header'].includes(error.originalMessage)) {\n    throw error;\n  } // In certain cases, protocol will return error if the request was\n  // already canceled or the page was closed. We should tolerate these\n  // errors.\n\n\n  (0, helper_js_1.debugError)(error);\n} // List taken from\n// https://www.iana.org/assignments/http-status-codes/http-status-codes.xhtml\n// with extra 306 and 418 codes.\n\n\nconst STATUS_TEXTS = {\n  '100': 'Continue',\n  '101': 'Switching Protocols',\n  '102': 'Processing',\n  '103': 'Early Hints',\n  '200': 'OK',\n  '201': 'Created',\n  '202': 'Accepted',\n  '203': 'Non-Authoritative Information',\n  '204': 'No Content',\n  '205': 'Reset Content',\n  '206': 'Partial Content',\n  '207': 'Multi-Status',\n  '208': 'Already Reported',\n  '226': 'IM Used',\n  '300': 'Multiple Choices',\n  '301': 'Moved Permanently',\n  '302': 'Found',\n  '303': 'See Other',\n  '304': 'Not Modified',\n  '305': 'Use Proxy',\n  '306': 'Switch Proxy',\n  '307': 'Temporary Redirect',\n  '308': 'Permanent Redirect',\n  '400': 'Bad Request',\n  '401': 'Unauthorized',\n  '402': 'Payment Required',\n  '403': 'Forbidden',\n  '404': 'Not Found',\n  '405': 'Method Not Allowed',\n  '406': 'Not Acceptable',\n  '407': 'Proxy Authentication Required',\n  '408': 'Request Timeout',\n  '409': 'Conflict',\n  '410': 'Gone',\n  '411': 'Length Required',\n  '412': 'Precondition Failed',\n  '413': 'Payload Too Large',\n  '414': 'URI Too Long',\n  '415': 'Unsupported Media Type',\n  '416': 'Range Not Satisfiable',\n  '417': 'Expectation Failed',\n  '418': \"I'm a teapot\",\n  '421': 'Misdirected Request',\n  '422': 'Unprocessable Entity',\n  '423': 'Locked',\n  '424': 'Failed Dependency',\n  '425': 'Too Early',\n  '426': 'Upgrade Required',\n  '428': 'Precondition Required',\n  '429': 'Too Many Requests',\n  '431': 'Request Header Fields Too Large',\n  '451': 'Unavailable For Legal Reasons',\n  '500': 'Internal Server Error',\n  '501': 'Not Implemented',\n  '502': 'Bad Gateway',\n  '503': 'Service Unavailable',\n  '504': 'Gateway Timeout',\n  '505': 'HTTP Version Not Supported',\n  '506': 'Variant Also Negotiates',\n  '507': 'Insufficient Storage',\n  '508': 'Loop Detected',\n  '510': 'Not Extended',\n  '511': 'Network Authentication Required'\n};","map":{"version":3,"mappings":"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","names":["exports","HTTPRequest","constructor","client","frame","interceptionId","allowInterception","event","redirectChain","_client","_requestId","requestId","_isNavigationRequest","loaderId","type","_interceptionId","_allowInterception","_url","request","url","_resourceType","toLowerCase","_method","method","_postData","postData","_frame","_redirectChain","_continueRequestOverrides","_interceptResolutionState","action","InterceptResolutionAction","None","_interceptHandlers","_initiator","initiator","key","Object","keys","headers","_headers","continueRequestOverrides","responseForRequest","_responseForRequest","abortErrorReason","_abortErrorReason","interceptResolutionState","Disabled","_interceptionHandled","AlreadyHandled","isInterceptResolutionHandled","enqueueInterceptAction","pendingHandler","push","finalizeInterceptions","reduce","promiseChain","interceptAction","then","Promise","resolve","_abort","_respond","_continue","resourceType","response","_response","isNavigationRequest","slice","failure","_failureText","errorText","continue","overrides","priority","startsWith","undefined","Continue","postDataBinaryBase64","Buffer","from","toString","send","headersArray","catch","error","handleError","respond","Respond","responseBody","body","helper_js_1","isString","responseHeaders","header","String","contentType","byteLength","responseCode","status","responsePhrase","STATUS_TEXTS","abort","errorCode","errorReason","errorReasons","Abort","aborted","accessdenied","addressunreachable","blockedbyclient","blockedbyresponse","connectionaborted","connectionclosed","connectionfailed","connectionrefused","connectionreset","internetdisconnected","namenotresolved","timedout","failed","result","name","is","value","includes","originalMessage"],"sources":["../../../../src/common/HTTPRequest.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}