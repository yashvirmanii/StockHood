{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Mitt: Tiny (~200b) functional event emitter / pubsub.\n * @name mitt\n * @returns {Mitt}\n */\n\nfunction mitt(all) {\n  all = all || new Map();\n  return {\n    /**\n     * A Map of event names to registered handler functions.\n     */\n    all,\n\n    /**\n     * Register an event handler for the given type.\n     * @param {string|symbol} type Type of event to listen for, or `\"*\"` for all events\n     * @param {Function} handler Function to call in response to given event\n     * @memberOf mitt\n     */\n    on(type, handler) {\n      const handlers = all.get(type);\n      const added = handlers && handlers.push(handler);\n\n      if (!added) {\n        all.set(type, [handler]);\n      }\n    },\n\n    /**\n     * Remove an event handler for the given type.\n     * @param {string|symbol} type Type of event to unregister `handler` from, or `\"*\"`\n     * @param {Function} handler Handler function to remove\n     * @memberOf mitt\n     */\n    off(type, handler) {\n      const handlers = all.get(type);\n\n      if (handlers) {\n        handlers.splice(handlers.indexOf(handler) >>> 0, 1);\n      }\n    },\n\n    /**\n     * Invoke all handlers for the given type.\n     * If present, `\"*\"` handlers are invoked after type-matched handlers.\n     *\n     * Note: Manually firing \"*\" handlers is not supported.\n     *\n     * @param {string|symbol} type The event type to invoke\n     * @param {Any} [evt] Any value (object is recommended and powerful), passed to each handler\n     * @memberOf mitt\n     */\n    emit(type, evt) {\n      (all.get(type) || []).slice().map(handler => {\n        handler(evt);\n      });\n      (all.get('*') || []).slice().map(handler => {\n        handler(type, evt);\n      });\n    }\n\n  };\n}\n\nexports.default = mitt;","map":{"version":3,"mappings":";;;;;AAkCA;;;;;;AAKA,SAAwBA,IAAxB,CAA6BC,GAA7B,EAAkD;AACjDA,KAAG,GAAGA,GAAG,IAAI,IAAIC,GAAJ,EAAb;AAEA,SAAO;AAEN;;;AAGAD,OALM;;AAON;;;;;;AAMAE,MAAE,CAAUC,IAAV,EAA2BC,OAA3B,EAA8C;AAC/C,YAAMC,QAAQ,GAAGL,GAAG,CAACM,GAAJ,CAAQH,IAAR,CAAjB;AACA,YAAMI,KAAK,GAAGF,QAAQ,IAAIA,QAAQ,CAACG,IAAT,CAAcJ,OAAd,CAA1B;;AACA,UAAI,CAACG,KAAL,EAAY;AACXP,WAAG,CAACS,GAAJ,CAAQN,IAAR,EAAc,CAACC,OAAD,CAAd;AACA;AACD,KAnBK;;AAqBN;;;;;;AAMAM,OAAG,CAAUP,IAAV,EAA2BC,OAA3B,EAA8C;AAChD,YAAMC,QAAQ,GAAGL,GAAG,CAACM,GAAJ,CAAQH,IAAR,CAAjB;;AACA,UAAIE,QAAJ,EAAc;AACbA,gBAAQ,CAACM,MAAT,CAAgBN,QAAQ,CAACO,OAAT,CAAiBR,OAAjB,MAA8B,CAA9C,EAAiD,CAAjD;AACA;AACD,KAhCK;;AAkCN;;;;;;;;;;AAUAS,QAAI,CAAUV,IAAV,EAA2BW,GAA3B,EAAiC;AACnC,OAACd,GAAG,CAACM,GAAJ,CAAQH,IAAR,KAAiB,EAAlB,EAA2CY,KAA3C,GAAmDC,GAAnD,CAAwDZ,OAAD,IAAY;AAAGA,eAAO,CAACU,GAAD,CAAP;AAAe,OAArF;AACA,OAACd,GAAG,CAACM,GAAJ,CAAQ,GAAR,KAAgB,EAAjB,EAAkDS,KAAlD,GAA0DC,GAA1D,CAA+DZ,OAAD,IAAY;AAAGA,eAAO,CAACD,IAAD,EAAOW,GAAP,CAAP;AAAqB,OAAlG;AACD;;AA/CK,GAAP;AAiDA;;AApDDG","names":["mitt","all","Map","on","type","handler","handlers","get","added","push","set","off","splice","indexOf","emit","evt","slice","map","exports"],"sources":["../../../../../vendor/mitt/src/index.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}