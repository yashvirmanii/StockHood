{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ariaHandler = void 0;\n\nasync function queryAXTree(client, element, accessibleName, role) {\n  const {\n    nodes\n  } = await client.send('Accessibility.queryAXTree', {\n    objectId: element._remoteObject.objectId,\n    accessibleName,\n    role\n  });\n  const filteredNodes = nodes.filter(node => node.role.value !== 'StaticText');\n  return filteredNodes;\n}\n\nconst normalizeValue = value => value.replace(/ +/g, ' ').trim();\n\nconst knownAttributes = new Set(['name', 'role']);\nconst attributeRegexp = /\\[\\s*(?<attribute>\\w+)\\s*=\\s*(?<quote>\"|')(?<value>\\\\.|.*?(?=\\k<quote>))\\k<quote>\\s*\\]/g;\n\nfunction parseAriaSelector(selector) {\n  const queryOptions = {};\n  const defaultName = selector.replace(attributeRegexp, (_, attribute, quote, value) => {\n    attribute = attribute.trim();\n    if (!knownAttributes.has(attribute)) throw new Error(`Unknown aria attribute \"${attribute}\" in selector`);\n    queryOptions[attribute] = normalizeValue(value);\n    return '';\n  });\n  if (defaultName && !queryOptions.name) queryOptions.name = normalizeValue(defaultName);\n  return queryOptions;\n}\n\nconst queryOne = async (element, selector) => {\n  const exeCtx = element.executionContext();\n  const {\n    name,\n    role\n  } = parseAriaSelector(selector);\n  const res = await queryAXTree(exeCtx._client, element, name, role);\n\n  if (res.length < 1) {\n    return null;\n  }\n\n  return exeCtx._adoptBackendNodeId(res[0].backendDOMNodeId);\n};\n\nconst waitFor = async (domWorld, selector, options) => {\n  const binding = {\n    name: 'ariaQuerySelector',\n    pptrFunction: async selector => {\n      const root = options.root || (await domWorld._document());\n      const element = await queryOne(root, selector);\n      return element;\n    }\n  };\n  return domWorld.waitForSelectorInPage((_, selector) => globalThis.ariaQuerySelector(selector), selector, options, binding);\n};\n\nconst queryAll = async (element, selector) => {\n  const exeCtx = element.executionContext();\n  const {\n    name,\n    role\n  } = parseAriaSelector(selector);\n  const res = await queryAXTree(exeCtx._client, element, name, role);\n  return Promise.all(res.map(axNode => exeCtx._adoptBackendNodeId(axNode.backendDOMNodeId)));\n};\n\nconst queryAllArray = async (element, selector) => {\n  const elementHandles = await queryAll(element, selector);\n  const exeCtx = element.executionContext();\n  const jsHandle = exeCtx.evaluateHandle(function () {\n    for (var _len = arguments.length, elements = new Array(_len), _key = 0; _key < _len; _key++) {\n      elements[_key] = arguments[_key];\n    }\n\n    return elements;\n  }, ...elementHandles);\n  return jsHandle;\n};\n/**\n * @internal\n */\n\n\nexports.ariaHandler = {\n  queryOne,\n  waitFor,\n  queryAll,\n  queryAllArray\n};","map":{"version":3,"mappings":"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","names":["queryAXTree","client","element","accessibleName","role","nodes","send","objectId","_remoteObject","filteredNodes","filter","node","value","normalizeValue","replace","trim","knownAttributes","Set","attributeRegexp","parseAriaSelector","selector","queryOptions","defaultName","_","attribute","quote","has","Error","name","queryOne","exeCtx","executionContext","res","_client","length","_adoptBackendNodeId","backendDOMNodeId","waitFor","domWorld","options","binding","pptrFunction","root","_document","waitForSelectorInPage","globalThis","ariaQuerySelector","queryAll","Promise","all","map","axNode","queryAllArray","elementHandles","jsHandle","evaluateHandle","elements","exports"],"sources":["../../../../src/common/AriaQueryHandler.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}