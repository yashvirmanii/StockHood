{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EventEmitter = void 0;\n\nconst index_js_1 = __importDefault(require(\"../../vendor/mitt/src/index.js\"));\n/**\n * The EventEmitter class that many Puppeteer classes extend.\n *\n * @remarks\n *\n * This allows you to listen to events that Puppeteer classes fire and act\n * accordingly. Therefore you'll mostly use {@link EventEmitter.on | on} and\n * {@link EventEmitter.off | off} to bind\n * and unbind to event listeners.\n *\n * @public\n */\n\n\nclass EventEmitter {\n  /**\n   * @internal\n   */\n  constructor() {\n    this.eventsMap = new Map();\n    this.emitter = (0, index_js_1.default)(this.eventsMap);\n  }\n  /**\n   * Bind an event listener to fire when an event occurs.\n   * @param event - the event type you'd like to listen to. Can be a string or symbol.\n   * @param handler  - the function to be called when the event occurs.\n   * @returns `this` to enable you to chain method calls.\n   */\n\n\n  on(event, handler) {\n    this.emitter.on(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener from firing.\n   * @param event - the event type you'd like to stop listening to.\n   * @param handler  - the function that should be removed.\n   * @returns `this` to enable you to chain method calls.\n   */\n\n\n  off(event, handler) {\n    this.emitter.off(event, handler);\n    return this;\n  }\n  /**\n   * Remove an event listener.\n   * @deprecated please use {@link EventEmitter.off} instead.\n   */\n\n\n  removeListener(event, handler) {\n    this.off(event, handler);\n    return this;\n  }\n  /**\n   * Add an event listener.\n   * @deprecated please use {@link EventEmitter.on} instead.\n   */\n\n\n  addListener(event, handler) {\n    this.on(event, handler);\n    return this;\n  }\n  /**\n   * Emit an event and call any associated listeners.\n   *\n   * @param event - the event you'd like to emit\n   * @param eventData - any data you'd like to emit with the event\n   * @returns `true` if there are any listeners, `false` if there are not.\n   */\n\n\n  emit(event, eventData) {\n    this.emitter.emit(event, eventData);\n    return this.eventListenersCount(event) > 0;\n  }\n  /**\n   * Like `on` but the listener will only be fired once and then it will be removed.\n   * @param event - the event you'd like to listen to\n   * @param handler - the handler function to run when the event occurs\n   * @returns `this` to enable you to chain method calls.\n   */\n\n\n  once(event, handler) {\n    const onceHandler = eventData => {\n      handler(eventData);\n      this.off(event, onceHandler);\n    };\n\n    return this.on(event, onceHandler);\n  }\n  /**\n   * Gets the number of listeners for a given event.\n   *\n   * @param event - the event to get the listener count for\n   * @returns the number of listeners bound to the given event\n   */\n\n\n  listenerCount(event) {\n    return this.eventListenersCount(event);\n  }\n  /**\n   * Removes all listeners. If given an event argument, it will remove only\n   * listeners for that event.\n   * @param event - the event to remove listeners for.\n   * @returns `this` to enable you to chain method calls.\n   */\n\n\n  removeAllListeners(event) {\n    if (event) {\n      this.eventsMap.delete(event);\n    } else {\n      this.eventsMap.clear();\n    }\n\n    return this;\n  }\n\n  eventListenersCount(event) {\n    var _a;\n\n    return ((_a = this.eventsMap.get(event)) === null || _a === void 0 ? void 0 : _a.length) || 0;\n  }\n\n}\n\nexports.EventEmitter = EventEmitter;","map":{"version":3,"mappings":";;;;;;;;;;;;;AAAA;AA8BA;;;;;;;;;;;;;;AAYA,MAAaA,YAAb,CAAyB;AAIvB;;;AAGAC;AALQ,qBAAY,IAAIC,GAAJ,EAAZ;AAMN,SAAKC,OAAL,GAAe,wBAAK,KAAKC,SAAV,CAAf;AACD;AAED;;;;;;;;AAMAC,IAAE,CAACC,KAAD,EAAmBC,OAAnB,EAAmC;AACnC,SAAKJ,OAAL,CAAaE,EAAb,CAAgBC,KAAhB,EAAuBC,OAAvB;AACA,WAAO,IAAP;AACD;AAED;;;;;;;;AAMAC,KAAG,CAACF,KAAD,EAAmBC,OAAnB,EAAmC;AACpC,SAAKJ,OAAL,CAAaK,GAAb,CAAiBF,KAAjB,EAAwBC,OAAxB;AACA,WAAO,IAAP;AACD;AAED;;;;;;AAIAE,gBAAc,CAACH,KAAD,EAAmBC,OAAnB,EAAmC;AAC/C,SAAKC,GAAL,CAASF,KAAT,EAAgBC,OAAhB;AACA,WAAO,IAAP;AACD;AAED;;;;;;AAIAG,aAAW,CAACJ,KAAD,EAAmBC,OAAnB,EAAmC;AAC5C,SAAKF,EAAL,CAAQC,KAAR,EAAeC,OAAf;AACA,WAAO,IAAP;AACD;AAED;;;;;;;;;AAOAI,MAAI,CAACL,KAAD,EAAmBM,SAAnB,EAAsC;AACxC,SAAKT,OAAL,CAAaQ,IAAb,CAAkBL,KAAlB,EAAyBM,SAAzB;AACA,WAAO,KAAKC,mBAAL,CAAyBP,KAAzB,IAAkC,CAAzC;AACD;AAED;;;;;;;;AAMAQ,MAAI,CAACR,KAAD,EAAmBC,OAAnB,EAAmC;AACrC,UAAMQ,WAAW,GAAaH,SAAD,IAAc;AACzCL,aAAO,CAACK,SAAD,CAAP;AACA,WAAKJ,GAAL,CAASF,KAAT,EAAgBS,WAAhB;AACD,KAHD;;AAKA,WAAO,KAAKV,EAAL,CAAQC,KAAR,EAAeS,WAAf,CAAP;AACD;AAED;;;;;;;;AAMAC,eAAa,CAACV,KAAD,EAAiB;AAC5B,WAAO,KAAKO,mBAAL,CAAyBP,KAAzB,CAAP;AACD;AAED;;;;;;;;AAMAW,oBAAkB,CAACX,KAAD,EAAkB;AAClC,QAAIA,KAAJ,EAAW;AACT,WAAKF,SAAL,CAAec,MAAf,CAAsBZ,KAAtB;AACD,KAFD,MAEO;AACL,WAAKF,SAAL,CAAee,KAAf;AACD;;AACD,WAAO,IAAP;AACD;;AAEON,qBAAmB,CAACP,KAAD,EAAiB;;;AAC1C,WAAO,YAAKF,SAAL,CAAegB,GAAf,CAAmBd,KAAnB,OAAyB,IAAzB,IAAyBe,aAAzB,GAAyB,MAAzB,GAAyBA,GAAEC,MAA3B,KAAqC,CAA5C;AACD;;AAzGsB;;AAAzBC","names":["EventEmitter","constructor","Map","emitter","eventsMap","on","event","handler","off","removeListener","addListener","emit","eventData","eventListenersCount","once","onceHandler","listenerCount","removeAllListeners","delete","clear","get","_a","length","exports"],"sources":["../../../../src/common/EventEmitter.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}