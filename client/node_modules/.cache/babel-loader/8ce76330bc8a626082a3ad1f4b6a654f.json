{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FileChooser = void 0;\n\nconst assert_js_1 = require(\"./assert.js\");\n/**\n * File choosers let you react to the page requesting for a file.\n * @remarks\n * `FileChooser` objects are returned via the `page.waitForFileChooser` method.\n * @example\n * An example of using `FileChooser`:\n * ```js\n * const [fileChooser] = await Promise.all([\n *   page.waitForFileChooser(),\n *   page.click('#upload-file-button'), // some button that triggers file selection\n * ]);\n * await fileChooser.accept(['/tmp/myfile.pdf']);\n * ```\n * **NOTE** In browsers, only one file chooser can be opened at a time.\n * All file choosers must be accepted or canceled. Not doing so will prevent\n * subsequent file choosers from appearing.\n * @public\n */\n\n\nclass FileChooser {\n  /**\n   * @internal\n   */\n  constructor(element, event) {\n    this._handled = false;\n    this._element = element;\n    this._multiple = event.mode !== 'selectSingle';\n  }\n  /**\n   * Whether file chooser allow for {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file#attr-multiple | multiple} file selection.\n   */\n\n\n  isMultiple() {\n    return this._multiple;\n  }\n  /**\n   * Accept the file chooser request with given paths.\n   * @param filePaths - If some of the  `filePaths` are relative paths,\n   * then they are resolved relative to the {@link https://nodejs.org/api/process.html#process_process_cwd | current working directory}.\n   */\n\n\n  async accept(filePaths) {\n    (0, assert_js_1.assert)(!this._handled, 'Cannot accept FileChooser which is already handled!');\n    this._handled = true;\n    await this._element.uploadFile(...filePaths);\n  }\n  /**\n   * Closes the file chooser without selecting any files.\n   */\n\n\n  cancel() {\n    (0, assert_js_1.assert)(!this._handled, 'Cannot cancel FileChooser which is already handled!');\n    this._handled = true;\n  }\n\n}\n\nexports.FileChooser = FileChooser;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAkBA;AAEA;;;;;;;;;;;;;;;;;;;;AAkBA,MAAaA,WAAb,CAAwB;AAKtB;;;AAGAC,cACEC,OADF,EAEEC,KAFF,EAE6C;AAPrC,oBAAW,KAAX;AASN,SAAKC,QAAL,GAAgBF,OAAhB;AACA,SAAKG,SAAL,GAAiBF,KAAK,CAACG,IAAN,KAAe,cAAhC;AACD;AAED;;;;;AAGAC,YAAU;AACR,WAAO,KAAKF,SAAZ;AACD;AAED;;;;;;;AAKY,QAANG,MAAM,CAACC,SAAD,EAAoB;AAC9B,4BACE,CAAC,KAAKC,QADR,EAEE,qDAFF;AAIA,SAAKA,QAAL,GAAgB,IAAhB;AACA,UAAM,KAAKN,QAAL,CAAcO,UAAd,CAAyB,GAAGF,SAA5B,CAAN;AACD;AAED;;;;;AAGAG,QAAM;AACJ,4BACE,CAAC,KAAKF,QADR,EAEE,qDAFF;AAIA,SAAKA,QAAL,GAAgB,IAAhB;AACD;;AA9CqB;;AAAxBG","names":["FileChooser","constructor","element","event","_element","_multiple","mode","isMultiple","accept","filePaths","_handled","uploadFile","cancel","exports"],"sources":["../../../../src/common/FileChooser.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}