{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NetworkManager = exports.NetworkManagerEmittedEvents = void 0;\n\nconst EventEmitter_js_1 = require(\"./EventEmitter.js\");\n\nconst assert_js_1 = require(\"./assert.js\");\n\nconst helper_js_1 = require(\"./helper.js\");\n\nconst HTTPRequest_js_1 = require(\"./HTTPRequest.js\");\n\nconst HTTPResponse_js_1 = require(\"./HTTPResponse.js\");\n\nconst NetworkEventManager_js_1 = require(\"./NetworkEventManager.js\");\n/**\n * We use symbols to prevent any external parties listening to these events.\n * They are internal to Puppeteer.\n *\n * @internal\n */\n\n\nexports.NetworkManagerEmittedEvents = {\n  Request: Symbol('NetworkManager.Request'),\n  RequestServedFromCache: Symbol('NetworkManager.RequestServedFromCache'),\n  Response: Symbol('NetworkManager.Response'),\n  RequestFailed: Symbol('NetworkManager.RequestFailed'),\n  RequestFinished: Symbol('NetworkManager.RequestFinished')\n};\n/**\n * @internal\n */\n\nclass NetworkManager extends EventEmitter_js_1.EventEmitter {\n  constructor(client, ignoreHTTPSErrors, frameManager) {\n    super();\n    this._networkEventManager = new NetworkEventManager_js_1.NetworkEventManager();\n    this._extraHTTPHeaders = {};\n    this._credentials = null;\n    this._attemptedAuthentications = new Set();\n    this._userRequestInterceptionEnabled = false;\n    this._protocolRequestInterceptionEnabled = false;\n    this._userCacheDisabled = false;\n    this._emulatedNetworkConditions = {\n      offline: false,\n      upload: -1,\n      download: -1,\n      latency: 0\n    };\n    this._client = client;\n    this._ignoreHTTPSErrors = ignoreHTTPSErrors;\n    this._frameManager = frameManager;\n\n    this._client.on('Fetch.requestPaused', this._onRequestPaused.bind(this));\n\n    this._client.on('Fetch.authRequired', this._onAuthRequired.bind(this));\n\n    this._client.on('Network.requestWillBeSent', this._onRequestWillBeSent.bind(this));\n\n    this._client.on('Network.requestServedFromCache', this._onRequestServedFromCache.bind(this));\n\n    this._client.on('Network.responseReceived', this._onResponseReceived.bind(this));\n\n    this._client.on('Network.loadingFinished', this._onLoadingFinished.bind(this));\n\n    this._client.on('Network.loadingFailed', this._onLoadingFailed.bind(this));\n\n    this._client.on('Network.responseReceivedExtraInfo', this._onResponseReceivedExtraInfo.bind(this));\n  }\n\n  async initialize() {\n    await this._client.send('Network.enable');\n    if (this._ignoreHTTPSErrors) await this._client.send('Security.setIgnoreCertificateErrors', {\n      ignore: true\n    });\n  }\n\n  async authenticate(credentials) {\n    this._credentials = credentials;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async setExtraHTTPHeaders(extraHTTPHeaders) {\n    this._extraHTTPHeaders = {};\n\n    for (const key of Object.keys(extraHTTPHeaders)) {\n      const value = extraHTTPHeaders[key];\n      (0, assert_js_1.assert)(helper_js_1.helper.isString(value), `Expected value of header \"${key}\" to be String, but \"${typeof value}\" is found.`);\n      this._extraHTTPHeaders[key.toLowerCase()] = value;\n    }\n\n    await this._client.send('Network.setExtraHTTPHeaders', {\n      headers: this._extraHTTPHeaders\n    });\n  }\n\n  extraHTTPHeaders() {\n    return Object.assign({}, this._extraHTTPHeaders);\n  }\n\n  numRequestsInProgress() {\n    return this._networkEventManager.numRequestsInProgress();\n  }\n\n  async setOfflineMode(value) {\n    this._emulatedNetworkConditions.offline = value;\n    await this._updateNetworkConditions();\n  }\n\n  async emulateNetworkConditions(networkConditions) {\n    this._emulatedNetworkConditions.upload = networkConditions ? networkConditions.upload : -1;\n    this._emulatedNetworkConditions.download = networkConditions ? networkConditions.download : -1;\n    this._emulatedNetworkConditions.latency = networkConditions ? networkConditions.latency : 0;\n    await this._updateNetworkConditions();\n  }\n\n  async _updateNetworkConditions() {\n    await this._client.send('Network.emulateNetworkConditions', {\n      offline: this._emulatedNetworkConditions.offline,\n      latency: this._emulatedNetworkConditions.latency,\n      uploadThroughput: this._emulatedNetworkConditions.upload,\n      downloadThroughput: this._emulatedNetworkConditions.download\n    });\n  }\n\n  async setUserAgent(userAgent, userAgentMetadata) {\n    await this._client.send('Network.setUserAgentOverride', {\n      userAgent: userAgent,\n      userAgentMetadata: userAgentMetadata\n    });\n  }\n\n  async setCacheEnabled(enabled) {\n    this._userCacheDisabled = !enabled;\n    await this._updateProtocolCacheDisabled();\n  }\n\n  async setRequestInterception(value) {\n    this._userRequestInterceptionEnabled = value;\n    await this._updateProtocolRequestInterception();\n  }\n\n  async _updateProtocolRequestInterception() {\n    const enabled = this._userRequestInterceptionEnabled || !!this._credentials;\n    if (enabled === this._protocolRequestInterceptionEnabled) return;\n    this._protocolRequestInterceptionEnabled = enabled;\n\n    if (enabled) {\n      await Promise.all([this._updateProtocolCacheDisabled(), this._client.send('Fetch.enable', {\n        handleAuthRequests: true,\n        patterns: [{\n          urlPattern: '*'\n        }]\n      })]);\n    } else {\n      await Promise.all([this._updateProtocolCacheDisabled(), this._client.send('Fetch.disable')]);\n    }\n  }\n\n  _cacheDisabled() {\n    return this._userCacheDisabled;\n  }\n\n  async _updateProtocolCacheDisabled() {\n    await this._client.send('Network.setCacheDisabled', {\n      cacheDisabled: this._cacheDisabled()\n    });\n  }\n\n  _onRequestWillBeSent(event) {\n    // Request interception doesn't happen for data URLs with Network Service.\n    if (this._userRequestInterceptionEnabled && !event.request.url.startsWith('data:')) {\n      const {\n        requestId: networkRequestId\n      } = event;\n\n      this._networkEventManager.storeRequestWillBeSent(networkRequestId, event);\n      /**\n       * CDP may have sent a Fetch.requestPaused event already. Check for it.\n       */\n\n\n      const requestPausedEvent = this._networkEventManager.getRequestPaused(networkRequestId);\n\n      if (requestPausedEvent) {\n        const {\n          requestId: fetchRequestId\n        } = requestPausedEvent;\n\n        this._onRequest(event, fetchRequestId);\n\n        this._networkEventManager.forgetRequestPaused(networkRequestId);\n      }\n\n      return;\n    }\n\n    this._onRequest(event, null);\n  }\n\n  _onAuthRequired(event) {\n    let response = 'Default';\n\n    if (this._attemptedAuthentications.has(event.requestId)) {\n      response = 'CancelAuth';\n    } else if (this._credentials) {\n      response = 'ProvideCredentials';\n\n      this._attemptedAuthentications.add(event.requestId);\n    }\n\n    const {\n      username,\n      password\n    } = this._credentials || {\n      username: undefined,\n      password: undefined\n    };\n\n    this._client.send('Fetch.continueWithAuth', {\n      requestId: event.requestId,\n      authChallengeResponse: {\n        response,\n        username,\n        password\n      }\n    }).catch(helper_js_1.debugError);\n  }\n  /**\n   * CDP may send a Fetch.requestPaused without or before a\n   * Network.requestWillBeSent\n   *\n   * CDP may send multiple Fetch.requestPaused\n   * for the same Network.requestWillBeSent.\n   *\n   *\n   */\n\n\n  _onRequestPaused(event) {\n    if (!this._userRequestInterceptionEnabled && this._protocolRequestInterceptionEnabled) {\n      this._client.send('Fetch.continueRequest', {\n        requestId: event.requestId\n      }).catch(helper_js_1.debugError);\n    }\n\n    const {\n      networkId: networkRequestId,\n      requestId: fetchRequestId\n    } = event;\n\n    if (!networkRequestId) {\n      return;\n    }\n\n    const requestWillBeSentEvent = (() => {\n      const requestWillBeSentEvent = this._networkEventManager.getRequestWillBeSent(networkRequestId); // redirect requests have the same `requestId`,\n\n\n      if (requestWillBeSentEvent && (requestWillBeSentEvent.request.url !== event.request.url || requestWillBeSentEvent.request.method !== event.request.method)) {\n        this._networkEventManager.forgetRequestWillBeSent(networkRequestId);\n\n        return;\n      }\n\n      return requestWillBeSentEvent;\n    })();\n\n    if (requestWillBeSentEvent) {\n      this._onRequest(requestWillBeSentEvent, fetchRequestId);\n    } else {\n      this._networkEventManager.storeRequestPaused(networkRequestId, event);\n    }\n  }\n\n  _onRequest(event, fetchRequestId) {\n    let redirectChain = [];\n\n    if (event.redirectResponse) {\n      // We want to emit a response and requestfinished for the\n      // redirectResponse, but we can't do so unless we have a\n      // responseExtraInfo ready to pair it up with. If we don't have any\n      // responseExtraInfos saved in our queue, they we have to wait until\n      // the next one to emit response and requestfinished, *and* we should\n      // also wait to emit this Request too because it should come after the\n      // response/requestfinished.\n      let redirectResponseExtraInfo = null;\n\n      if (event.redirectHasExtraInfo) {\n        redirectResponseExtraInfo = this._networkEventManager.responseExtraInfo(event.requestId).shift();\n\n        if (!redirectResponseExtraInfo) {\n          this._networkEventManager.queueRedirectInfo(event.requestId, {\n            event,\n            fetchRequestId\n          });\n\n          return;\n        }\n      }\n\n      const request = this._networkEventManager.getRequest(event.requestId); // If we connect late to the target, we could have missed the\n      // requestWillBeSent event.\n\n\n      if (request) {\n        this._handleRequestRedirect(request, event.redirectResponse, redirectResponseExtraInfo);\n\n        redirectChain = request._redirectChain;\n      }\n    }\n\n    const frame = event.frameId ? this._frameManager.frame(event.frameId) : null;\n    const request = new HTTPRequest_js_1.HTTPRequest(this._client, frame, fetchRequestId, this._userRequestInterceptionEnabled, event, redirectChain);\n\n    this._networkEventManager.storeRequest(event.requestId, request);\n\n    this.emit(exports.NetworkManagerEmittedEvents.Request, request);\n    request.finalizeInterceptions();\n  }\n\n  _onRequestServedFromCache(event) {\n    const request = this._networkEventManager.getRequest(event.requestId);\n\n    if (request) request._fromMemoryCache = true;\n    this.emit(exports.NetworkManagerEmittedEvents.RequestServedFromCache, request);\n  }\n\n  _handleRequestRedirect(request, responsePayload, extraInfo) {\n    const response = new HTTPResponse_js_1.HTTPResponse(this._client, request, responsePayload, extraInfo);\n    request._response = response;\n\n    request._redirectChain.push(request);\n\n    response._resolveBody(new Error('Response body is unavailable for redirect responses'));\n\n    this._forgetRequest(request, false);\n\n    this.emit(exports.NetworkManagerEmittedEvents.Response, response);\n    this.emit(exports.NetworkManagerEmittedEvents.RequestFinished, request);\n  }\n\n  _emitResponseEvent(responseReceived, extraInfo) {\n    const request = this._networkEventManager.getRequest(responseReceived.requestId); // FileUpload sends a response without a matching request.\n\n\n    if (!request) return;\n\n    const extraInfos = this._networkEventManager.responseExtraInfo(responseReceived.requestId);\n\n    if (extraInfos.length) {\n      (0, helper_js_1.debugError)(new Error('Unexpected extraInfo events for request ' + responseReceived.requestId));\n    }\n\n    const response = new HTTPResponse_js_1.HTTPResponse(this._client, request, responseReceived.response, extraInfo);\n    request._response = response;\n    this.emit(exports.NetworkManagerEmittedEvents.Response, response);\n  }\n\n  _onResponseReceived(event) {\n    const request = this._networkEventManager.getRequest(event.requestId);\n\n    let extraInfo = null;\n\n    if (request && !request._fromMemoryCache && event.hasExtraInfo) {\n      extraInfo = this._networkEventManager.responseExtraInfo(event.requestId).shift();\n\n      if (!extraInfo) {\n        // Wait until we get the corresponding ExtraInfo event.\n        this._networkEventManager.queueEventGroup(event.requestId, {\n          responseReceivedEvent: event\n        });\n\n        return;\n      }\n    }\n\n    this._emitResponseEvent(event, extraInfo);\n  }\n\n  _onResponseReceivedExtraInfo(event) {\n    // We may have skipped a redirect response/request pair due to waiting for\n    // this ExtraInfo event. If so, continue that work now that we have the\n    // request.\n    const redirectInfo = this._networkEventManager.takeQueuedRedirectInfo(event.requestId);\n\n    if (redirectInfo) {\n      this._networkEventManager.responseExtraInfo(event.requestId).push(event);\n\n      this._onRequest(redirectInfo.event, redirectInfo.fetchRequestId);\n\n      return;\n    } // We may have skipped response and loading events because we didn't have\n    // this ExtraInfo event yet. If so, emit those events now.\n\n\n    const queuedEvents = this._networkEventManager.getQueuedEventGroup(event.requestId);\n\n    if (queuedEvents) {\n      this._emitResponseEvent(queuedEvents.responseReceivedEvent, event);\n\n      if (queuedEvents.loadingFinishedEvent) {\n        this._emitLoadingFinished(queuedEvents.loadingFinishedEvent);\n      }\n\n      if (queuedEvents.loadingFailedEvent) {\n        this._emitLoadingFailed(queuedEvents.loadingFailedEvent);\n      }\n\n      return;\n    } // Wait until we get another event that can use this ExtraInfo event.\n\n\n    this._networkEventManager.responseExtraInfo(event.requestId).push(event);\n  }\n\n  _forgetRequest(request, events) {\n    const requestId = request._requestId;\n    const interceptionId = request._interceptionId;\n\n    this._networkEventManager.forgetRequest(requestId);\n\n    this._attemptedAuthentications.delete(interceptionId);\n\n    if (events) {\n      this._networkEventManager.forget(requestId);\n    }\n  }\n\n  _onLoadingFinished(event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this._networkEventManager.getQueuedEventGroup(event.requestId);\n\n    if (queuedEvents) {\n      queuedEvents.loadingFinishedEvent = event;\n    } else {\n      this._emitLoadingFinished(event);\n    }\n  }\n\n  _emitLoadingFinished(event) {\n    const request = this._networkEventManager.getRequest(event.requestId); // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n\n\n    if (!request) return; // Under certain conditions we never get the Network.responseReceived\n    // event from protocol. @see https://crbug.com/883475\n\n    if (request.response()) request.response()._resolveBody(null);\n\n    this._forgetRequest(request, true);\n\n    this.emit(exports.NetworkManagerEmittedEvents.RequestFinished, request);\n  }\n\n  _onLoadingFailed(event) {\n    // If the response event for this request is still waiting on a\n    // corresponding ExtraInfo event, then wait to emit this event too.\n    const queuedEvents = this._networkEventManager.getQueuedEventGroup(event.requestId);\n\n    if (queuedEvents) {\n      queuedEvents.loadingFailedEvent = event;\n    } else {\n      this._emitLoadingFailed(event);\n    }\n  }\n\n  _emitLoadingFailed(event) {\n    const request = this._networkEventManager.getRequest(event.requestId); // For certain requestIds we never receive requestWillBeSent event.\n    // @see https://crbug.com/750469\n\n\n    if (!request) return;\n    request._failureText = event.errorText;\n    const response = request.response();\n    if (response) response._resolveBody(null);\n\n    this._forgetRequest(request, true);\n\n    this.emit(exports.NetworkManagerEmittedEvents.RequestFailed, request);\n  }\n\n}\n\nexports.NetworkManager = NetworkManager;","map":{"version":3,"mappings":"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","names":["exports","Request","Symbol","RequestServedFromCache","Response","RequestFailed","RequestFinished","NetworkManager","EventEmitter_js_1","constructor","client","ignoreHTTPSErrors","frameManager","NetworkEventManager_js_1","Set","offline","upload","download","latency","_client","_ignoreHTTPSErrors","_frameManager","on","_onRequestPaused","bind","_onAuthRequired","_onRequestWillBeSent","_onRequestServedFromCache","_onResponseReceived","_onLoadingFinished","_onLoadingFailed","_onResponseReceivedExtraInfo","initialize","send","ignore","authenticate","credentials","_credentials","_updateProtocolRequestInterception","setExtraHTTPHeaders","extraHTTPHeaders","_extraHTTPHeaders","key","Object","keys","value","helper_js_1","isString","toLowerCase","headers","assign","numRequestsInProgress","_networkEventManager","setOfflineMode","_emulatedNetworkConditions","_updateNetworkConditions","emulateNetworkConditions","networkConditions","uploadThroughput","downloadThroughput","setUserAgent","userAgent","userAgentMetadata","setCacheEnabled","enabled","_userCacheDisabled","_updateProtocolCacheDisabled","setRequestInterception","_userRequestInterceptionEnabled","_protocolRequestInterceptionEnabled","Promise","all","handleAuthRequests","patterns","urlPattern","_cacheDisabled","cacheDisabled","event","request","url","startsWith","requestId","networkRequestId","storeRequestWillBeSent","requestPausedEvent","getRequestPaused","fetchRequestId","_onRequest","forgetRequestPaused","response","_attemptedAuthentications","has","add","username","password","undefined","authChallengeResponse","catch","networkId","requestWillBeSentEvent","getRequestWillBeSent","method","forgetRequestWillBeSent","storeRequestPaused","redirectChain","redirectResponse","redirectResponseExtraInfo","redirectHasExtraInfo","responseExtraInfo","shift","queueRedirectInfo","getRequest","_handleRequestRedirect","_redirectChain","frame","frameId","HTTPRequest_js_1","storeRequest","emit","finalizeInterceptions","_fromMemoryCache","responsePayload","extraInfo","HTTPResponse_js_1","_response","push","_resolveBody","Error","_forgetRequest","_emitResponseEvent","responseReceived","extraInfos","length","hasExtraInfo","queueEventGroup","responseReceivedEvent","redirectInfo","takeQueuedRedirectInfo","queuedEvents","getQueuedEventGroup","loadingFinishedEvent","_emitLoadingFinished","loadingFailedEvent","_emitLoadingFailed","events","_requestId","interceptionId","_interceptionId","forgetRequest","delete","forget","_failureText","errorText"],"sources":["../../../../src/common/NetworkManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}