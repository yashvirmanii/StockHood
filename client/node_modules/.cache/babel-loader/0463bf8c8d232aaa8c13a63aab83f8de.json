{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PipeTransport = void 0;\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst helper_js_1 = require(\"../common/helper.js\");\n\nclass PipeTransport {\n  constructor(pipeWrite, pipeRead) {\n    this._pipeWrite = pipeWrite;\n    this._pendingMessage = '';\n    this._eventListeners = [helper_js_1.helper.addEventListener(pipeRead, 'data', buffer => this._dispatch(buffer)), helper_js_1.helper.addEventListener(pipeRead, 'close', () => {\n      if (this.onclose) this.onclose.call(null);\n    }), helper_js_1.helper.addEventListener(pipeRead, 'error', helper_js_1.debugError), helper_js_1.helper.addEventListener(pipeWrite, 'error', helper_js_1.debugError)];\n    this.onmessage = null;\n    this.onclose = null;\n  }\n\n  send(message) {\n    this._pipeWrite.write(message);\n\n    this._pipeWrite.write('\\0');\n  }\n\n  _dispatch(buffer) {\n    let end = buffer.indexOf('\\0');\n\n    if (end === -1) {\n      this._pendingMessage += buffer.toString();\n      return;\n    }\n\n    const message = this._pendingMessage + buffer.toString(undefined, 0, end);\n    if (this.onmessage) this.onmessage.call(null, message);\n    let start = end + 1;\n    end = buffer.indexOf('\\0', start);\n\n    while (end !== -1) {\n      if (this.onmessage) this.onmessage.call(null, buffer.toString(undefined, start, end));\n      start = end + 1;\n      end = buffer.indexOf('\\0', start);\n    }\n\n    this._pendingMessage = buffer.toString(undefined, start);\n  }\n\n  close() {\n    this._pipeWrite = null;\n    helper_js_1.helper.removeEventListeners(this._eventListeners);\n  }\n\n}\n\nexports.PipeTransport = PipeTransport;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;AAeA;;AAOA,MAAaA,aAAb,CAA0B;AAQxBC,cACEC,SADF,EAEEC,QAFF,EAEiC;AAE/B,SAAKC,UAAL,GAAkBF,SAAlB;AACA,SAAKG,eAAL,GAAuB,EAAvB;AACA,SAAKC,eAAL,GAAuB,CACrBC,mBAAOC,gBAAP,CAAwBL,QAAxB,EAAkC,MAAlC,EAA2CM,MAAD,IACxC,KAAKC,SAAL,CAAeD,MAAf,CADF,CADqB,EAIrBF,mBAAOC,gBAAP,CAAwBL,QAAxB,EAAkC,OAAlC,EAA2C,MAAK;AAC9C,UAAI,KAAKQ,OAAT,EAAkB,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB;AACnB,KAFD,CAJqB,EAOrBL,mBAAOC,gBAAP,CAAwBL,QAAxB,EAAkC,OAAlC,EAA2CI,sBAA3C,CAPqB,EAQrBA,mBAAOC,gBAAP,CAAwBN,SAAxB,EAAmC,OAAnC,EAA4CK,sBAA5C,CARqB,CAAvB;AAUA,SAAKM,SAAL,GAAiB,IAAjB;AACA,SAAKF,OAAL,GAAe,IAAf;AACD;;AAEDG,MAAI,CAACC,OAAD,EAAgB;AAClB,SAAKX,UAAL,CAAgBY,KAAhB,CAAsBD,OAAtB;;AACA,SAAKX,UAAL,CAAgBY,KAAhB,CAAsB,IAAtB;AACD;;AAEDN,WAAS,CAACD,MAAD,EAAe;AACtB,QAAIQ,GAAG,GAAGR,MAAM,CAACS,OAAP,CAAe,IAAf,CAAV;;AACA,QAAID,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,WAAKZ,eAAL,IAAwBI,MAAM,CAACU,QAAP,EAAxB;AACA;AACD;;AACD,UAAMJ,OAAO,GAAG,KAAKV,eAAL,GAAuBI,MAAM,CAACU,QAAP,CAAgBC,SAAhB,EAA2B,CAA3B,EAA8BH,GAA9B,CAAvC;AACA,QAAI,KAAKJ,SAAT,EAAoB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,EAA0BG,OAA1B;AAEpB,QAAIM,KAAK,GAAGJ,GAAG,GAAG,CAAlB;AACAA,OAAG,GAAGR,MAAM,CAACS,OAAP,CAAe,IAAf,EAAqBG,KAArB,CAAN;;AACA,WAAOJ,GAAG,KAAK,CAAC,CAAhB,EAAmB;AACjB,UAAI,KAAKJ,SAAT,EACE,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,EAA0BH,MAAM,CAACU,QAAP,CAAgBC,SAAhB,EAA2BC,KAA3B,EAAkCJ,GAAlC,CAA1B;AACFI,WAAK,GAAGJ,GAAG,GAAG,CAAd;AACAA,SAAG,GAAGR,MAAM,CAACS,OAAP,CAAe,IAAf,EAAqBG,KAArB,CAAN;AACD;;AACD,SAAKhB,eAAL,GAAuBI,MAAM,CAACU,QAAP,CAAgBC,SAAhB,EAA2BC,KAA3B,CAAvB;AACD;;AAEDC,OAAK;AACH,SAAKlB,UAAL,GAAkB,IAAlB;AACAG,uBAAOgB,oBAAP,CAA4B,KAAKjB,eAAjC;AACD;;AAxDuB;;AAA1BkB","names":["PipeTransport","constructor","pipeWrite","pipeRead","_pipeWrite","_pendingMessage","_eventListeners","helper_js_1","addEventListener","buffer","_dispatch","onclose","call","onmessage","send","message","write","end","indexOf","toString","undefined","start","close","removeEventListeners","exports"],"sources":["../../../../src/node/PipeTransport.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}