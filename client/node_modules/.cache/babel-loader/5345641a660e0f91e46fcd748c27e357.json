{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2020 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.debug = void 0;\n\nconst environment_js_1 = require(\"../environment.js\");\n/**\n * A debug function that can be used in any environment.\n *\n * @remarks\n *\n * If used in Node, it falls back to the\n * {@link https://www.npmjs.com/package/debug | debug module}. In the browser it\n * uses `console.log`.\n *\n * @param prefix - this will be prefixed to each log.\n * @returns a function that can be called to log to that debug channel.\n *\n * In Node, use the `DEBUG` environment variable to control logging:\n *\n * ```\n * DEBUG=* // logs all channels\n * DEBUG=foo // logs the `foo` channel\n * DEBUG=foo* // logs any channels starting with `foo`\n * ```\n *\n * In the browser, set `window.__PUPPETEER_DEBUG` to a string:\n *\n * ```\n * window.__PUPPETEER_DEBUG='*'; // logs all channels\n * window.__PUPPETEER_DEBUG='foo'; // logs the `foo` channel\n * window.__PUPPETEER_DEBUG='foo*'; // logs any channels starting with `foo`\n * ```\n *\n * @example\n * ```\n * const log = debug('Page');\n *\n * log('new page created')\n * // logs \"Page: new page created\"\n * ```\n */\n\n\nconst debug = prefix => {\n  if (environment_js_1.isNode) {\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return require('debug')(prefix);\n  }\n\n  return function () {\n    const debugLevel = globalThis.__PUPPETEER_DEBUG;\n    if (!debugLevel) return;\n    const everythingShouldBeLogged = debugLevel === '*';\n    const prefixMatchesDebugLevel = everythingShouldBeLogged || (\n    /**\n     * If the debug level is `foo*`, that means we match any prefix that\n     * starts with `foo`. If the level is `foo`, we match only the prefix\n     * `foo`.\n     */\n    debugLevel.endsWith('*') ? prefix.startsWith(debugLevel) : prefix === debugLevel);\n    if (!prefixMatchesDebugLevel) return; // eslint-disable-next-line no-console\n\n    for (var _len = arguments.length, logArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      logArgs[_key] = arguments[_key];\n    }\n\n    console.log(`${prefix}:`, ...logArgs);\n  };\n};\n\nexports.debug = debug;","map":{"version":3,"mappings":";AAAA;;;;;;;;;;;;;;;;;;;;;AAgBA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCO,MAAMA,KAAK,GAAIC,MAAD,IAAmD;AACtE,MAAIC,uBAAJ,EAAY;AACV;AACA,WAAOC,OAAO,CAAC,OAAD,CAAP,CAAiBF,MAAjB,CAAP;AACD;;AAED,SAAO,YAAgC;AACrC,UAAMG,UAAU,GAAGC,UAAU,CAACC,iBAA9B;AACA,QAAI,CAACF,UAAL,EAAiB;AAEjB,UAAMG,wBAAwB,GAAGH,UAAU,KAAK,GAAhD;AAEA,UAAMI,uBAAuB,GAC3BD,wBAAwB;AACxB;;;;;AAKCH,cAAU,CAACK,QAAX,CAAoB,GAApB,IACGR,MAAM,CAACS,UAAP,CAAkBN,UAAlB,CADH,GAEGH,MAAM,KAAKG,UARS,CAD1B;AAWA,QAAI,CAACI,uBAAL,EAA8B,OAjBO,CAmBrC;;AAnBqC,sCAA5BG,OAA4B;AAA5BA,aAA4B;AAAA;;AAoBrCC,WAAO,CAACC,GAAR,CAAY,GAAGZ,MAAM,GAArB,EAA0B,GAAGU,OAA7B;AACD,GArBD;AAsBD,CA5BM;;AAAMG,gBAAKd,KAAL","names":["debug","prefix","environment_js_1","require","debugLevel","globalThis","__PUPPETEER_DEBUG","everythingShouldBeLogged","prefixMatchesDebugLevel","endsWith","startsWith","logArgs","console","log","exports"],"sources":["../../../../src/common/Debug.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}