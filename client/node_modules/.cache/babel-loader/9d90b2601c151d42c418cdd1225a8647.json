{"ast":null,"code":"\"use strict\";\n/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Accessibility = void 0;\n/**\n * The Accessibility class provides methods for inspecting Chromium's\n * accessibility tree. The accessibility tree is used by assistive technology\n * such as {@link https://en.wikipedia.org/wiki/Screen_reader | screen readers} or\n * {@link https://en.wikipedia.org/wiki/Switch_access | switches}.\n *\n * @remarks\n *\n * Accessibility is a very platform-specific thing. On different platforms,\n * there are different screen readers that might have wildly different output.\n *\n * Blink - Chrome's rendering engine - has a concept of \"accessibility tree\",\n * which is then translated into different platform-specific APIs. Accessibility\n * namespace gives users access to the Blink Accessibility Tree.\n *\n * Most of the accessibility tree gets filtered out when converting from Blink\n * AX Tree to Platform-specific AX-Tree or by assistive technologies themselves.\n * By default, Puppeteer tries to approximate this filtering, exposing only\n * the \"interesting\" nodes of the tree.\n *\n * @public\n */\n\nclass Accessibility {\n  /**\n   * @internal\n   */\n  constructor(client) {\n    this._client = client;\n  }\n  /**\n   * Captures the current state of the accessibility tree.\n   * The returned object represents the root accessible node of the page.\n   *\n   * @remarks\n   *\n   * **NOTE** The Chromium accessibility tree contains nodes that go unused on\n   * most platforms and by most screen readers. Puppeteer will discard them as\n   * well for an easier to process tree, unless `interestingOnly` is set to\n   * `false`.\n   *\n   * @example\n   * An example of dumping the entire accessibility tree:\n   * ```js\n   * const snapshot = await page.accessibility.snapshot();\n   * console.log(snapshot);\n   * ```\n   *\n   * @example\n   * An example of logging the focused node's name:\n   * ```js\n   * const snapshot = await page.accessibility.snapshot();\n   * const node = findFocusedNode(snapshot);\n   * console.log(node && node.name);\n   *\n   * function findFocusedNode(node) {\n   *   if (node.focused)\n   *     return node;\n   *   for (const child of node.children || []) {\n   *     const foundNode = findFocusedNode(child);\n   *     return foundNode;\n   *   }\n   *   return null;\n   * }\n   * ```\n   *\n   * @returns An AXNode object representing the snapshot.\n   *\n   */\n\n\n  async snapshot() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      interestingOnly = true,\n      root = null\n    } = options;\n    const {\n      nodes\n    } = await this._client.send('Accessibility.getFullAXTree');\n    let backendNodeId = null;\n\n    if (root) {\n      const {\n        node\n      } = await this._client.send('DOM.describeNode', {\n        objectId: root._remoteObject.objectId\n      });\n      backendNodeId = node.backendNodeId;\n    }\n\n    const defaultRoot = AXNode.createTree(nodes);\n    let needle = defaultRoot;\n\n    if (backendNodeId) {\n      needle = defaultRoot.find(node => node.payload.backendDOMNodeId === backendNodeId);\n      if (!needle) return null;\n    }\n\n    if (!interestingOnly) return this.serializeTree(needle)[0];\n    const interestingNodes = new Set();\n    this.collectInterestingNodes(interestingNodes, defaultRoot, false);\n    if (!interestingNodes.has(needle)) return null;\n    return this.serializeTree(needle, interestingNodes)[0];\n  }\n\n  serializeTree(node, interestingNodes) {\n    const children = [];\n\n    for (const child of node.children) children.push(...this.serializeTree(child, interestingNodes));\n\n    if (interestingNodes && !interestingNodes.has(node)) return children;\n    const serializedNode = node.serialize();\n    if (children.length) serializedNode.children = children;\n    return [serializedNode];\n  }\n\n  collectInterestingNodes(collection, node, insideControl) {\n    if (node.isInteresting(insideControl)) collection.add(node);\n    if (node.isLeafNode()) return;\n    insideControl = insideControl || node.isControl();\n\n    for (const child of node.children) this.collectInterestingNodes(collection, child, insideControl);\n  }\n\n}\n\nexports.Accessibility = Accessibility;\n\nclass AXNode {\n  constructor(payload) {\n    this.children = [];\n    this._richlyEditable = false;\n    this._editable = false;\n    this._focusable = false;\n    this._hidden = false;\n    this.payload = payload;\n    this._name = this.payload.name ? this.payload.name.value : '';\n    this._role = this.payload.role ? this.payload.role.value : 'Unknown';\n    this._ignored = this.payload.ignored;\n\n    for (const property of this.payload.properties || []) {\n      if (property.name === 'editable') {\n        this._richlyEditable = property.value.value === 'richtext';\n        this._editable = true;\n      }\n\n      if (property.name === 'focusable') this._focusable = property.value.value;\n      if (property.name === 'hidden') this._hidden = property.value.value;\n    }\n  }\n\n  _isPlainTextField() {\n    if (this._richlyEditable) return false;\n    if (this._editable) return true;\n    return this._role === 'textbox' || this._role === 'searchbox';\n  }\n\n  _isTextOnlyObject() {\n    const role = this._role;\n    return role === 'LineBreak' || role === 'text' || role === 'InlineTextBox';\n  }\n\n  _hasFocusableChild() {\n    if (this._cachedHasFocusableChild === undefined) {\n      this._cachedHasFocusableChild = false;\n\n      for (const child of this.children) {\n        if (child._focusable || child._hasFocusableChild()) {\n          this._cachedHasFocusableChild = true;\n          break;\n        }\n      }\n    }\n\n    return this._cachedHasFocusableChild;\n  }\n\n  find(predicate) {\n    if (predicate(this)) return this;\n\n    for (const child of this.children) {\n      const result = child.find(predicate);\n      if (result) return result;\n    }\n\n    return null;\n  }\n\n  isLeafNode() {\n    if (!this.children.length) return true; // These types of objects may have children that we use as internal\n    // implementation details, but we want to expose them as leaves to platform\n    // accessibility APIs because screen readers might be confused if they find\n    // any children.\n\n    if (this._isPlainTextField() || this._isTextOnlyObject()) return true; // Roles whose children are only presentational according to the ARIA and\n    // HTML5 Specs should be hidden from screen readers.\n    // (Note that whilst ARIA buttons can have only presentational children, HTML5\n    // buttons are allowed to have content.)\n\n    switch (this._role) {\n      case 'doc-cover':\n      case 'graphics-symbol':\n      case 'img':\n      case 'Meter':\n      case 'scrollbar':\n      case 'slider':\n      case 'separator':\n      case 'progressbar':\n        return true;\n\n      default:\n        break;\n    } // Here and below: Android heuristics\n\n\n    if (this._hasFocusableChild()) return false;\n    if (this._focusable && this._name) return true;\n    if (this._role === 'heading' && this._name) return true;\n    return false;\n  }\n\n  isControl() {\n    switch (this._role) {\n      case 'button':\n      case 'checkbox':\n      case 'ColorWell':\n      case 'combobox':\n      case 'DisclosureTriangle':\n      case 'listbox':\n      case 'menu':\n      case 'menubar':\n      case 'menuitem':\n      case 'menuitemcheckbox':\n      case 'menuitemradio':\n      case 'radio':\n      case 'scrollbar':\n      case 'searchbox':\n      case 'slider':\n      case 'spinbutton':\n      case 'switch':\n      case 'tab':\n      case 'textbox':\n      case 'tree':\n      case 'treeitem':\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  isInteresting(insideControl) {\n    const role = this._role;\n    if (role === 'Ignored' || this._hidden || this._ignored) return false;\n    if (this._focusable || this._richlyEditable) return true; // If it's not focusable but has a control role, then it's interesting.\n\n    if (this.isControl()) return true; // A non focusable child of a control is not interesting\n\n    if (insideControl) return false;\n    return this.isLeafNode() && !!this._name;\n  }\n\n  serialize() {\n    const properties = new Map();\n\n    for (const property of this.payload.properties || []) properties.set(property.name.toLowerCase(), property.value.value);\n\n    if (this.payload.name) properties.set('name', this.payload.name.value);\n    if (this.payload.value) properties.set('value', this.payload.value.value);\n    if (this.payload.description) properties.set('description', this.payload.description.value);\n    const node = {\n      role: this._role\n    };\n    const userStringProperties = ['name', 'value', 'description', 'keyshortcuts', 'roledescription', 'valuetext'];\n\n    const getUserStringPropertyValue = key => properties.get(key);\n\n    for (const userStringProperty of userStringProperties) {\n      if (!properties.has(userStringProperty)) continue;\n      node[userStringProperty] = getUserStringPropertyValue(userStringProperty);\n    }\n\n    const booleanProperties = ['disabled', 'expanded', 'focused', 'modal', 'multiline', 'multiselectable', 'readonly', 'required', 'selected'];\n\n    const getBooleanPropertyValue = key => properties.get(key);\n\n    for (const booleanProperty of booleanProperties) {\n      // RootWebArea's treat focus differently than other nodes. They report whether\n      // their frame  has focus, not whether focus is specifically on the root\n      // node.\n      if (booleanProperty === 'focused' && this._role === 'RootWebArea') continue;\n      const value = getBooleanPropertyValue(booleanProperty);\n      if (!value) continue;\n      node[booleanProperty] = getBooleanPropertyValue(booleanProperty);\n    }\n\n    const tristateProperties = ['checked', 'pressed'];\n\n    for (const tristateProperty of tristateProperties) {\n      if (!properties.has(tristateProperty)) continue;\n      const value = properties.get(tristateProperty);\n      node[tristateProperty] = value === 'mixed' ? 'mixed' : value === 'true' ? true : false;\n    }\n\n    const numericalProperties = ['level', 'valuemax', 'valuemin'];\n\n    const getNumericalPropertyValue = key => properties.get(key);\n\n    for (const numericalProperty of numericalProperties) {\n      if (!properties.has(numericalProperty)) continue;\n      node[numericalProperty] = getNumericalPropertyValue(numericalProperty);\n    }\n\n    const tokenProperties = ['autocomplete', 'haspopup', 'invalid', 'orientation'];\n\n    const getTokenPropertyValue = key => properties.get(key);\n\n    for (const tokenProperty of tokenProperties) {\n      const value = getTokenPropertyValue(tokenProperty);\n      if (!value || value === 'false') continue;\n      node[tokenProperty] = getTokenPropertyValue(tokenProperty);\n    }\n\n    return node;\n  }\n\n  static createTree(payloads) {\n    const nodeById = new Map();\n\n    for (const payload of payloads) nodeById.set(payload.nodeId, new AXNode(payload));\n\n    for (const node of nodeById.values()) {\n      for (const childId of node.payload.childIds || []) node.children.push(nodeById.get(childId));\n    }\n\n    return nodeById.values().next().value;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["Accessibility","constructor","client","_client","snapshot","options","interestingOnly","root","nodes","send","backendNodeId","node","objectId","_remoteObject","defaultRoot","AXNode","createTree","needle","find","payload","backendDOMNodeId","serializeTree","interestingNodes","Set","collectInterestingNodes","has","children","child","push","serializedNode","serialize","length","collection","insideControl","isInteresting","add","isLeafNode","isControl","exports","_name","name","value","_role","role","_ignored","ignored","property","properties","_richlyEditable","_editable","_focusable","_hidden","_isPlainTextField","_isTextOnlyObject","_hasFocusableChild","_cachedHasFocusableChild","undefined","predicate","result","Map","set","toLowerCase","description","userStringProperties","getUserStringPropertyValue","key","get","userStringProperty","booleanProperties","getBooleanPropertyValue","booleanProperty","tristateProperties","tristateProperty","numericalProperties","getNumericalPropertyValue","numericalProperty","tokenProperties","getTokenPropertyValue","tokenProperty","payloads","nodeById","nodeId","values","childId","childIds","next"],"sources":["../../../../src/common/Accessibility.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"script"}